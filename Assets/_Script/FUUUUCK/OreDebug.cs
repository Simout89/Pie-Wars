// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞ –ª—é–±–æ–π GameObject –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
using UnityEngine;
using System.Collections.Generic;
using _Script.SelectedEntitys;

public class MiningSystemDebug : MonoBehaviour
{
    void Update()
    {
        if(Input.GetKeyDown(KeyCode.F1))
        {
            CheckAllSystems();
        }
        
        if(Input.GetKeyDown(KeyCode.F2))
        {
            CreateSimpleResourceNode();
        }
        
        if(Input.GetKeyDown(KeyCode.F3))
        {
            TestDirectCommand();
        }
    }
    
    void CheckAllSystems()
    {
        Debug.Log("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ ===");
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º ResourceManager
        ResourceManager rm = FindObjectOfType<ResourceManager>();
        Debug.Log($"ResourceManager: {(rm != null ? "‚úÖ –ù–ê–ô–î–ï–ù" : "‚ùå –ù–ï –ù–ê–ô–î–ï–ù")}");
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º EntitysController  
        EntitysController ec = FindObjectOfType<EntitysController>();
        Debug.Log($"EntitysController: {(ec != null ? "‚úÖ –ù–ê–ô–î–ï–ù" : "‚ùå –ù–ï –ù–ê–ô–î–ï–ù")}");
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º MapClickHendler
        MapClickHendler mch = FindObjectOfType<MapClickHendler>();
        Debug.Log($"MapClickHendler: {(mch != null ? "‚úÖ –ù–ê–ô–î–ï–ù" : "‚ùå –ù–ï –ù–ê–ô–î–ï–ù")}");
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º SelectedEntitysModel
        SelectedEntitysModel sem = FindObjectOfType<SelectedEntitysModel>();
        Debug.Log($"SelectedEntitysModel: {(sem != null ? "‚úÖ –ù–ê–ô–î–ï–ù" : "‚ùå –ù–ï –ù–ê–ô–î–ï–ù")}");
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —é–Ω–∏—Ç–æ–≤
        Unit[] units = FindObjectsOfType<Unit>();
        Debug.Log($"–Æ–Ω–∏—Ç–æ–≤ –Ω–∞ —Å—Ü–µ–Ω–µ: {units.Length}");
        
        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∑–ª—ã —Ä–µ—Å—É—Ä—Å–æ–≤
        ResourceNode[] nodes = FindObjectsOfType<ResourceNode>();
        Debug.Log($"–£–∑–ª–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤: {nodes.Length}");
        
        if(sem != null)
        {
            Debug.Log($"–í—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤: {sem.SelectedEntitys.Count}");
        }
        
        Debug.Log("=== –ù–ê–ñ–ú–ò–¢–ï F2 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–∞ —Ä–µ—Å—É—Ä—Å–∞ ===");
    }
    
    void CreateSimpleResourceNode()
    {
        Debug.Log("üî® –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —É–∑–µ–ª —Ä–µ—Å—É—Ä—Å–∞...");
        
        // –°–æ–∑–¥–∞–µ–º –∫—É–± —Ä—è–¥–æ–º —Å –∫–∞–º–µ—Ä–æ–π
        Vector3 cameraPos = Camera.main.transform.position;
        Vector3 spawnPos = cameraPos + Camera.main.transform.forward * 10;
        spawnPos.y = 1;
        
        GameObject node = GameObject.CreatePrimitive(PrimitiveType.Cube);
        node.transform.position = spawnPos;
        node.transform.localScale = Vector3.one * 3;
        node.name = "DebugResourceNode";
        
        // –î–æ–±–∞–≤–ª—è–µ–º ResourceNode
        node.AddComponent<ResourceNode>();
        
        // –î–µ–ª–∞–µ–º –∫—Ä–∞—Å–Ω—ã–º —á—Ç–æ–±—ã –≤—ã–¥–µ–ª—è–ª—Å—è
        node.GetComponent<Renderer>().material.color = Color.red;
        
        Debug.Log($"‚úÖ –£–∑–µ–ª —Å–æ–∑–¥–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏: {spawnPos}");
        Debug.Log("üéØ –ò–ù–°–¢–†–£–ö–¶–ò–Ø:");
        Debug.Log("1. –í—ã–¥–µ–ª–∏—Ç–µ —é–Ω–∏—Ç–∞ –õ–ö–ú");
        Debug.Log("2. –ü–ö–ú –ø–æ –ö–†–ê–°–ù–û–ú–£ –∫—É–±—É");
        Debug.Log("3. –°–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å");
        Debug.Log("4. F3 - —Ç–µ—Å—Ç –ø—Ä—è–º–æ–π –∫–æ–º–∞–Ω–¥—ã");
    }
    
    void TestDirectCommand()
    {
        Debug.Log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—É—é –∫–æ–º–∞–Ω–¥—É –¥–æ–±—ã—á–∏...");
        
        // –ù–∞—Ö–æ–¥–∏–º —é–Ω–∏—Ç–∞ –∏ —É–∑–µ–ª —Ä–µ—Å—É—Ä—Å–∞
        Unit unit = FindObjectOfType<Unit>();
        ResourceNode node = FindObjectOfType<ResourceNode>();
        
        if(unit == null)
        {
            Debug.LogError("‚ùå –Æ–Ω–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }
        
        if(node == null)
        {
            Debug.LogError("‚ùå –£–∑–µ–ª —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–∞–∂–º–∏—Ç–µ F2 —Å–Ω–∞—á–∞–ª–∞");
            return;
        }
        
        Debug.Log($"‚úÖ –ù–∞–π–¥–µ–Ω —é–Ω–∏—Ç: {unit.name}");
        Debug.Log($"‚úÖ –ù–∞–π–¥–µ–Ω —É–∑–µ–ª: {node.name}");
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø—Ä—è–º—É—é
        HarvestCommand harvestCmd = new HarvestCommand(unit, node);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —é–Ω–∏—Ç—É
        unit.ClearCommandList();
        unit.AddCommand(harvestCmd);
        
        Debug.Log("üéØ –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±—ã—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é!");
        Debug.Log("–Æ–Ω–∏—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–π—Ç–∏ –∫ —É–∑–ª—É –∏ –Ω–∞—á–∞—Ç—å –¥–æ–±—ã—á—É");
    }
}