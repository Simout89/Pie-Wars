using System;
using System.Collections;
using _Script.SelectedEntitys;
using UnityEngine;
using UnityEngine.EventSystems;

public class ClickHandler : MonoBehaviour
{
    [SerializeField] private CameraContoller _cameraContoller;
    [SerializeField] private UnitControl _unitControl;

    private void Update()
    {
        // –ü–ö–ú - –∫–æ–º–∞–Ω–¥—ã/–¥–æ–±—ã—á–∞/–¥–≤–∏–∂–µ–Ω–∏–µ
        if (Input.GetMouseButtonDown(1))
        {
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            RaycastHit hit = default;
            if (Physics.Raycast(ray, out hit))
            {
                Debug.Log($"ClickHandler: –ü–æ–ø–∞–ª –≤ {hit.collider.gameObject.name}");
                
                // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ —Ä–µ—Å—É—Ä—Å—É
                if(hit.collider.TryGetComponent(out ResourceNode resourceNode))
                {
                    HandleResourceClick(resourceNode);
                    return;
                }
                
                // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –û–±—ã—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ/–∞—Ç–∞–∫–∞
                _unitControl.ClickRMB(hit.point, hit.collider.gameObject);
            }
        }
        
        // –õ–ö–ú - –≤—ã–¥–µ–ª–µ–Ω–∏–µ —é–Ω–∏—Ç–æ–≤
        if (Input.GetMouseButtonDown(0))
        {
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            RaycastHit hit = default;
            if(CheckNotEntity(hit , ray)) return;

            CheckOnUnit(hit, ray);
        }

        // ESC - –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
        if (Input.GetKeyDown(KeyCode.Escape))
        {
            CancelAllCommandsForSelectedUnits();
        }

        // S - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
        if (Input.GetKeyDown(KeyCode.S))
        {
            StopSelectedUnits();
        }

        if (Input.GetMouseButtonUp(0))
        {
            _cameraContoller.CameraMoveState = true;
        }
    }

    private void HandleResourceClick(ResourceNode resourceNode)
    {
        Debug.Log($"üéØ ClickHandler: –ö–ª–∏–∫ –ø–æ —Ä–µ—Å—É—Ä—Å—É {resourceNode.ResourceType}");
        
        // Ctrl + –ü–ö–ú = –æ—Ç–º–µ–Ω–∞ –¥–æ–±—ã—á–∏
        if(Input.GetKey(KeyCode.LeftControl) || Input.GetKey(KeyCode.RightControl))
        {
            Debug.Log("üõë Ctrl + –ü–ö–ú: –û—Ç–º–µ–Ω–∞ –¥–æ–±—ã—á–∏");
            CancelAllCommandsForSelectedUnits();
            return;
        }
        
        if(resourceNode.IsEmpty)
        {
            Debug.Log("‚ùå –£–∑–µ–ª —Ä–µ—Å—É—Ä—Å–∞ –∏—Å—Ç–æ—â–µ–Ω!");
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤
        SelectedEntitysModel selectedModel = FindObjectOfType<SelectedEntitysModel>();
        if(selectedModel == null || selectedModel.SelectedEntitys.Count == 0)
        {
            Debug.Log("‚ùå –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ –¥–ª—è –¥–æ–±—ã—á–∏!");
            return;
        }

        Debug.Log($"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {selectedModel.SelectedEntitys.Count} —é–Ω–∏—Ç–æ–≤ –Ω–∞ –¥–æ–±—ã—á—É {resourceNode.ResourceType}");
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —é–Ω–∏—Ç–æ–≤ –Ω–∞ –¥–æ–±—ã—á—É
        foreach(IEntity entity in selectedModel.SelectedEntitys)
        {
            HarvestCommand harvestCmd = new HarvestCommand(entity, resourceNode);
            
            if(Input.GetKey(KeyCode.LeftShift))
            {
                // Shift + –ü–ö–ú = –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥
                entity.AddCommand(harvestCmd);
                Debug.Log($"‚ûï –î–æ–±—ã—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {entity.transform.name}");
            }
            else
            {
                // –ü—Ä–æ—Å—Ç–æ –ü–ö–ú = –∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –¥–æ–±—ã—á—É
                entity.ClearCommandList();
                entity.AddCommand(harvestCmd);
                Debug.Log($"üéØ –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±—ã—á–∏: {entity.transform.name}");
            }
        }
    }
    
    private void CancelAllCommandsForSelectedUnits()
    {
        SelectedEntitysModel selectedModel = FindObjectOfType<SelectedEntitysModel>();
        if(selectedModel == null || selectedModel.SelectedEntitys.Count == 0)
        {
            Debug.Log("‚ùå –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥!");
            return;
        }
        
        Debug.Log($"üõë –û–¢–ú–ï–ù–ê –í–°–ï–• –ö–û–ú–ê–ù–î –¥–ª—è {selectedModel.SelectedEntitys.Count} —é–Ω–∏—Ç–æ–≤");
        
        foreach(IEntity entity in selectedModel.SelectedEntitys)
        {
            entity.ClearCommandList();
            Debug.Log($"üõë –ö–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω—ã: {entity.transform.name}");
        }
        
        Debug.Log("‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã!");
    }

    private void StopSelectedUnits()
    {
        Debug.Log("üõë –û–°–¢–ê–ù–û–í–ö–ê –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ (S)");
        CancelAllCommandsForSelectedUnits();
    }

    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    private bool CheckNotEntity(RaycastHit hit, Ray ray)
    {
        if (Physics.Raycast(ray, out hit) && hit.collider.gameObject.name == "Plane")
        {
            return true;
        }
        _cameraContoller.CameraMoveState = false;
        return false;
    }
    
    private void CheckOnUnit(RaycastHit hit, Ray ray)
    {
        if (Physics.Raycast(ray, out hit) && hit.collider.gameObject.TryGetComponent(out UnitModel unitModel))
        {
            _unitControl.ClickOnUnit(unitModel);
        }
    }
}